
class Serializer
  attr_reader :model, :builder, :root, :params, :includer, :include_nil

  delegate :includable_query, :includable?, :includable, :root_includable_scope,
           :includes_param, :meta_param, :list?, to: :includer

  def initialize(model, includer: nil, params: {}, root: true, include_nil: false, **options)
    @model = model
    @builder = Jbuilder.new(ignore_nil: !include_nil)
    @includer = includer || Includer.new(self)
    @params = params
    @root = root
    @include_nil = include_nil
    @options = options

    builder.id(id) if id
    build
  end

  def id
    @id ||= model.id.to_s if model.respond_to?(:id) and not model.is_a?(Hash)
  end

  def build
  end

  def to_json
    builder.target!
  end

  def to_hash
    builder.attributes!
  end

  def fields(*names, model: self.model, default: nil)
    names.each do |name|
      value = model.send(name)
      value = default unless value or value == false
      name = name.to_s
      if value or value == false
        if name.ends_with?('_id') or name == 'id'
          value = value.to_s
        elsif name.ends_with?('_ids')
          value = value.map(&:to_s)
        end
      end
      builder.set!(name, value)
    end
  end

  # used to map a relation (either a collection or single item) and build its partial.
  # This method provides the includeable option as a convienence to having to wrap
  # relations within includable blocks.
  # The permission option is used to call `user_can!(permission)` - most useful for when
  # includable is used, since this enforcement will only be applied IF the inclusion was requested.
  def relation(name, includable: false, serializer: nil, value: nil, allow_nil: false, default: nil, permission: nil, &block)
    if includable
      whitelist = includable.is_a?(Boolean) ? nil : includable
      includable(name, whitelist) do
        if !block_given? or block.call
          relation(name, serializer: serializer, value: value)
        end
      end
    else
      user_can!(permission) if permission
      value ||= model.send(name) || default
      if value
        if value.respond_to?(:each)
          builder.set!(name, array(value, serializer))
        else
          builder.set!(name, partial(value, serializer))
        end
      elsif include_nil and allow_nil
        builder.set!(name, nil)
      end
    end
  end

  def partial(partial_model, serializer = nil, root = false)
    partial_model = model.send(partial_model) if partial_model.is_a? Symbol
    serializer = Serializer.from_model(partial_model) if serializer.nil?
    serializer = Serializer.from_name(serializer) if serializer.is_a? String

    instance = serializer.new(partial_model, includer: @includer, params: @params, root: root, include_nil: include_nil)
    instance.to_hash
  end

  def array(models, serializer = nil, root = false)
    serializer = Serializer.from_name(serializer) if serializer.is_a? String
    models.map {|m| partial(m, serializer, root) }
  end

  def self.from_model(model)
    from_name(model.class.name)
  end

  def self.from_name(name)
    "#{name}Serializer".to_const
  end

  def includable_scope(name, &block)
    # do not allow nested scopes of the same type as the root includable to be included - so that
    # we can prevent recursive includes
    if @root or name != includer.root_includable_scope
      includer.includable_scope(name, &block)
    end
  end

  def admin?
    User.current && User.current.is_admin?
  end

  def user_can?(action, data = model)
    User.current && User.current.can?(action, data)
  end

  class Includer
    attr_reader :root

    def initialize(root)
      @root = root
    end

    # returns true if the root model is a list
    def list?
      root.model.respond_to?(:each)
    end

    def params
      root.params
    end

    # All includables should be wrapped within this block so
    # that the scope can be used to determine if an includable should be included. Once an includable
    # has been included for a certain scope, that will be the only scope in which that includable
    # can be included in in any subsequent views for the request. This is what makes it possible
    # to support includables within list requests.
    def includable_scope(name)
      @root_includable_scope ||= name

      previous = @includable_scope
      @includable_scope = name
      yield
      @includable_scope = previous
    end

    # indicates the root includable scope. This gives views a reference point to decide if
    # something should be included or not at a deeper nesting level.
    def root_includable_scope
      @root_includable_scope
    end

    # eager loads a query if the item is going to be be included. Currently this method
    # only supports including one relation
    def includable_query(name, query)
      if includes_param.include?(name) and includable?(name)
        query.includes(name)
      else
        query
      end
    end

    def includable?(name)
      raise RuntimeError.new('includable scope missing') unless @includable_scope
      @includables ||= {}
      includes_param.include?(name) && (!@includables[name] or @includables[name] == @includable_scope)
    end

    # used as a helper within json views. Wrap code within this block to include relation data.
    # this method will handle actually outputing the relation data, determined by the presence of the
    # include property and wether or not the data has already been included.
    def includable(name, root_scopes_whitelist = nil, &block)
      # if root_scopes was included then limit the includable to only be used if the root scope
      # matches one of those provided.
      if root_scopes_whitelist
        root_scopes_whitelist = *root_scopes_whitelist
        return unless root_scopes_whitelist.include?(root_includable_scope)
      end

      if includable?(name)
        @includables[name] = @includable_scope
        block.call
      end
    end

    # returns the include param, always as an array
    def includes_param
      @includes_param ||= begin
        param = *params[:includes]
        param.map(&:to_sym)
      end
    end

    def meta_param
      @meta_param ||= begin
        param = *params[:meta]
        param.map(&:to_sym)
      end
    end
  end
end
