module WhereFilters
  extend ActiveSupport::Concern

  def apply_where_param(query, client_filters, &block)
    where = JSON.parse(params[:where])
    deep_snake_case_params!(where)
    where.each do |field, filter|

      field = field.to_sym
      # if a block is given then we will use its value, unless
      if block_given?
        result = yield(query, field, filter)
        if result
          query = result
          next
        end
      end

      # custom filters are the new preferred way to go about things. you can define a inline filter
      # within the class or use a symbol to point to an instance method
      if custom_filter = self.class.where_field_filters[field]
        if custom_filter.is_a? Symbol
          query = self.send(custom_filter, query, field, filter)
        else
          query = self.instance_exec(query, filter, &custom_filter)
        end
        next
      end

      # client filters are the legacy way of including filters. They do still provide the added value of being defined
      # inline to the calling method, so they are specific to each action
      #raise InvalidDataError.new('filter not allowed') unless client_filters.include?(field)
      # admin users can use whatever filters they want, all other users must whitelist the allowed filters
      unless client_filters.include?(field) or admin_logged_in?
        Rails.logger.info("Skipping filter field #{field} since it is not allowed");
        next
      end

      # use the default where filter
      query = where_filter(query, field, filter)
    end
    query
  end

  def where_filter(query, field, filter)
    # support shortcut syntax
    if filter.is_a? Array
      query.in(field => filter)
    elsif filter.is_a? Hash
      filter = filter.first
      val = filter.last
      case filter.first
        when '=='
          query = query.where(field => val)
        when '!='
          query = query.ne(field => val)
        when '>='
          query = query.gte(field => val)
        when '>'
          query = query.gt(field => val)
        when '<='
          query = query.lte(field => val)
        when '<'
          query = query.lt(field => val)
      end
    else
      query = query.where(field => filter)
    end
  end

  module ClassMethods

    def where_field_filters
      @@where_field_filters ||= {}
    end

    def where_field_filter(field, method = nil, &block)
      raise "filter already defined for #{field}" if where_field_filters[field]
      where_field_filters[field] = block_given? ? block : method
    end

  end

end
